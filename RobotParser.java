/* Generated By:JavaCC: Do not edit this line. RobotParser.java */
package uniandes.lym.robot.control;
import uniandes.lym.robot.kernel.*;
import java.io.*;
@ SuppressWarnings("serial")
public class RobotParser implements RobotParserConstants {
  private RobotWorldDec robotw;
  private String[] vars;
  private int[] values;

  void setWorld(RobotWorld w)
  {
    robotw = (RobotWorldDec) w;
  }

  void delay(int d)
  {
    try
    {
      Thread.sleep(d);
    }
    catch (InterruptedException e)
    {
      System.err.format("IOException: %s%n", e);
    }
  }

  final public void Assign() throws ParseException {
   boolean en = false;
   String var;
   int value;
    jj_consume_token(T_ASSIGN);
    jj_consume_token(PI);
    jj_consume_token(NUM);
                         value=Integer.parseInt(token.image);
    jj_consume_token(TO);
    jj_consume_token(VAR);
                                                                         var = token.image;
    jj_consume_token(SC);
 for (int i = 0; i < vars.length && !en; i++) {
                        System.out.println(vars[i] + " - " + var);
                        if (vars[i].equals(var)) {
                                values[i] = value;
                                en = true;
                                System.out.println(values[i]);
                        }
                }
                if (en = false) {
                        {if (true) throw new Error("A variable of name: " + var + "was not found");}
                }
  }

  final public void Move() throws ParseException {
  String n;
  int num = 0;
    jj_consume_token(T_MOVE);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                 n = token.image;
    jj_consume_token(SC);
  try {
                num = Integer.parseInt(n);
                } catch (NumberFormatException e) {
                        boolean en = false;
                        for (int i = 0; i < vars.length && !en; i++) {
                                if (vars[i].equals(n)) {
                                        num = values[i];
                                        en = true;
                                }
                        }
                }
                robotw.moveForward(num);
    jj_consume_token(T_MOVE);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                 n = token.image;
    jj_consume_token(TOTHE);
    jj_consume_token(DIRECTION);
                                                                                          D = token.image;
    jj_consume_token(SC);
                try {
                        num = Integer.parseInt(n);
                } catch (NumberFormatException e) {
                        boolean en = false;
                        for (int i = 0; i < vars.length && !en; i++) {
                                if (vars[i].equals(n)) {
                                        num = values[i];
                                        en = true;
                                }
                        }
                }
                switch (D) {
                case "front":
                        robotw.moveVertically(num);
                        break;
                case "back":
                        robotw.moveVertically(-num);
                        break;
                case "right":
                        robotw.moveHorizontally(num);
                        break;
                case "left":
                        robotw.moveHorizontally(-num);
                        break;
                }
    jj_consume_token(T_MOVE);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                  n = token.image;
    jj_consume_token(INDIR);
    jj_consume_token(PI);
    jj_consume_token(FACE);
                                                                           O = token.image;
    jj_consume_token(SC);
  try {
                num = Integer.parseInt(n);
                } catch (NumberFormatException e) {
                        boolean en = false;
                        for (int i = 0; i < vars.length && !en; i++) {
                                if (vars[i].equals(n)) {
                                        num = values[i];
                                        en = true;
                                }
                        }
                }
                switch (O) {
                case "north":
                        while (!(robotw.getOrientation() == 0)) {
                                robotw.turnRight();
                        }
                        break;
                case "south":
                        while (!(robotw.getOrientation() == 1)) {
                                robotw.turnRight();
                        }
                        break;
                case "east":
                        while (!(robotw.getOrientation() == 2)) {
                                robotw.turnRight();
                        }
                        break;
                case "west":
                        while (!(robotw.getOrientation() == 3)) {
                                robotw.turnRight();
                        }
                        break;
                }
                robotw.moveForward(num);
  }

  final public void Turn() throws ParseException {
 String d;
    jj_consume_token(T_TURN);
    jj_consume_token(PI);
    jj_consume_token(DIRECTION);
                               d = token.image;
    jj_consume_token(SC);
    switch (d) {
                case "right":
                        robotw.turnRight();
                        break;
                case "left":
                        robotw.turnRight();
                        robotw.turnRight();
                        robotw.turnRight();
                        break;
                }
  }

  final public void Face() throws ParseException {
 String O;
    jj_consume_token(T_FACE);
    jj_consume_token(PI);
    jj_consume_token(FACE);
                         O = token.image;
    jj_consume_token(SC);
switch (O) {
                case "north":
                        while (!(robotw.getOrientation() == 0)) {
                                robotw.turnRight();
                        }
                        break;
                case "south":
                        while (!(robotw.getOrientation() == 1)) {
                                robotw.turnRight();
                        }
                        break;
                case "east":
                        while (!(robotw.getOrientation() == 2)) {
                                robotw.turnRight();
                        }
                        break;
                case "west":
                        while (!(robotw.getOrientation() == 3)) {
                                robotw.turnRight();
                        }
                        break;
                }
  }

  final public void Put() throws ParseException {
  String X;
  int num = 0;
  String n;
    jj_consume_token(T_PUT);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                n = token.image;
    jj_consume_token(OF);
    jj_consume_token(PI);
    jj_consume_token(XT);
                                                                  X = token.image;
    jj_consume_token(SC);
  try {
                  num = Integer.parseInt(n);
                } catch (NumberFormatException e) {
                        boolean en = false;
                        for (int i = 0; i < vars.length && !en; i++) {
                                if (vars[i].equals(n)) {
                                        num = values[i];
                                        en = true;
                                }
                        }
                }
                switch (X) {
                case "Ballons":
                        robotw.putBalloons(num);
                        break;
                case "Chips":
                        robotw.putChips(num);
                        break;
                }
  }

  final public void Pick() throws ParseException {
 String X;
int num = 0;
String n;
    jj_consume_token(T_PICK);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                  n = token.image;
    jj_consume_token(OF);
    jj_consume_token(PI);
    jj_consume_token(XT);
                                                                     X= token.image;
    jj_consume_token(SC);
  try {
                num = Integer.parseInt(n);
                } catch (NumberFormatException e) {
                        boolean en = false;
                        for (int i = 0; i < vars.length && !en; i++) {
                                if (vars[i].equals(n)) {
                                        num = values[i];
                                        en = true;
                                }
                        }
                }
                switch (X) {
                case "Ballons":
                        robotw.grabBalloons(num);
                        break;
                case "Chips":
                        robotw.pickChips(num);
                        break;
                }
  }

//void MoveDir():
//{String D;
//String n;
//int num =0; }
//{
//<T_MOVE ><PI >(<VAR >|< NUM >) { n = token.image;}<TOTHE >< DIRECTION > { D = token.image; }<SC >
//{
//		try {
//			num = Integer.parseInt(n);
//		} catch (NumberFormatException e) {
//			boolean en = false;
//			for (int i = 0; i < vars.length && !en; i++) {
//				if (vars[i].equals(n)) {
//					num = values[i];
//					en = true;
//				}
//			}
//		}
//		switch (D) {
//		case "front":
//			robotw.moveVertically(num);
//			break;
//		case "back":
//			robotw.moveVertically(-num);
//			break;
//		case "right":
//			robotw.moveHorizontally(num);
//			break;
//		case "left":
//			robotw.moveHorizontally(-num);
//			break;
//		}
//}
//}
//
//void MoveOr():
//{String n;
//String O;
//int num =0;}
//{
//< T_MOVE ><PI >(<VAR >|< NUM >) { n = token.image; }<INDIR ><PI ><FACE > { O = token.image; }<SC >
//{
//  try {
//		num = Integer.parseInt(n);
//		} catch (NumberFormatException e) {
//			boolean en = false;
//			for (int i = 0; i < vars.length && !en; i++) {
//				if (vars[i].equals(n)) {
//					num = values[i];
//					en = true;
//				}
//			}
//		}
//		switch (O) {
//		case "north":
//			while (!(robotw.getOrientation() == 0)) {
//				robotw.turnRight();
//			}
//			break;
//		case "south":
//			while (!(robotw.getOrientation() == 1)) {
//				robotw.turnRight();
//			}
//			break;
//		case "east":
//			while (!(robotw.getOrientation() == 2)) {
//				robotw.turnRight();
//			}
//			break;
//		case "west":
//			while (!(robotw.getOrientation() == 3)) {
//				robotw.turnRight();
//			}
//			break;
//		}
//		robotw.moveForward(num);
//}
//}
  final public boolean facing() throws ParseException {
 String O;
    jj_consume_token(T_FACING);
    jj_consume_token(PI);
    jj_consume_token(FACE);
                             O=token.image;
    switch(O) {
      case "north":
         {if (true) return robotw.facingNorth();}
      case "south":
         {if (true) return robotw.facingSouth();}
      case "east":
         {if (true) return robotw.facingEast();}
      case "west":
         {if (true) return robotw.facingWest();}
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean canput() throws ParseException {
 String X;
String n;
int num =0;
    jj_consume_token(T_CANPUT);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                      n = token.image;
    jj_consume_token(OF);
    jj_consume_token(XT);
                                                                    X=token.image;
    try {
                num = Integer.parseInt(n);
                } catch (NumberFormatException e) {
                        boolean en = false;
                        for (int i = 0; i < vars.length && !en; i++) {
                                if (vars[i].equals(n)) {
                                        num = values[i];
                                        en = true;
                                }
                        }
                }
                  switch (X) {
                case "Ballons":
                        if(robotw.getMyBalloons()< num) { {if (true) return false;}}
                        break;
                case "Chips":
                        if(num>robotw.freeSpacesForChips()) { {if (true) return false;}}
                        break;
                }
        {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

  final public boolean canpick() throws ParseException {
 String X;
String n;
int num =0;
    jj_consume_token(T_CANPICK);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                       n = token.image;
    jj_consume_token(OF);
    jj_consume_token(XT);
                                                                     X=token.image;
    try {
                num = Integer.parseInt(n);
                } catch (NumberFormatException e) {
                        boolean en = false;
                        for (int i = 0; i < vars.length && !en; i++) {
                                if (vars[i].equals(n)) {
                                        num = values[i];
                                        en = true;
                                }
                        }
                }
                  switch (X) {
                case "Ballons":
                        if(robotw.countBalloons(robotw.getPosition()) < num) { {if (true) return false;}}
                        break;
                case "Chips":
                        if(num>robotw.chipsToPick()) { {if (true) return false;}}
                        break;
                }
        {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

  final public boolean canmove() throws ParseException {
 String D;
    jj_consume_token(T_CANMOVE);
    jj_consume_token(PI);
    jj_consume_token(FACE);
                            D = token.image;
   switch(D) {
      case "north":
         {if (true) return !robotw.atTop();}
      case "south":
         {if (true) return !robotw.atBottom();}
      case "east":
         {if (true) return !robotw.atRight();}
      case "west":
         {if (true) return !robotw.atLeft();}
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean not() throws ParseException {
  boolean v;
    jj_consume_token(T_NOT);
    jj_consume_token(PI);
    cond();
                         v =cond();
    {if (true) return !v;}
    throw new Error("Missing return statement in function");
  }

  final public void block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_ASSIGN:
      Assign();
      break;
    case T_MOVE:
      Move();
      break;
    case T_TURN:
      Turn();
      break;
    case T_FACE:
      Face();
      break;
    case T_PUT:
      Put();
      break;
    case T_PICK:
      Pick();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public boolean cond() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_CANMOVE:
      canmove();
               {if (true) return canmove();}
      break;
    case T_CANPICK:
      canpick();
                                              {if (true) return canpick();}
      break;
    case T_CANPUT:
      canput();
                                                                             {if (true) return canput();}
      break;
    case T_FACING:
      facing();
                                                                                                           {if (true) return facing();}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean cond1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_FACING:
    case T_CANPUT:
    case T_CANPICK:
    case T_CANMOVE:
      cond();
      break;
    case T_NOT:
      not();
                  {if (true) return not();}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void if1() throws ParseException {
  boolean v;int looks =0;
    jj_consume_token(T_IF);
    jj_consume_token(PI);
    cond();
 v = cond1();
if(v) { looks = 2;}
else
looks = 4;
    jj_consume_token(COMA);
    block();
    jj_consume_token(COMA);
    block();
  }

  final public void vars() throws ParseException {
  int i=0;
    jj_consume_token(VARS);
    jj_consume_token(VAR);
                    vars[i]=token.image;i++;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        jj_consume_token(VAR);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                         vars[i]=token.image;i++;
    }
  }

  final public void while1() throws ParseException {
  boolean v;
    jj_consume_token(T_WHILE);
    jj_consume_token(PI);
    cond1();
                           v = cond1();
    jj_consume_token(COMA);
    block();
   while(v) {
     block();
   }
  }

  final public void repeat() throws ParseException {
 String n;
int num =0;
int j=0;
    jj_consume_token(T_REPEAT);
    jj_consume_token(PI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                     n = token.image;
    block();
    try {
                num = Integer.parseInt(n);
                } catch (NumberFormatException e) {
                        boolean en = false;
                        for (int i = 0; i < vars.length && !en; i++) {
                                if (vars[i].equals(n)) {
                                        num = values[i];
                                        en = true;
                                }
                        }
                }
  while(j<num) {
    block();
    j++;
  }
  }

  final public void controlestr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_IF:
      if1();
      break;
    case T_WHILE:
      while1();
      break;
    case T_REPEAT:
      repeat();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public boolean instructions(StringBuffer system) throws ParseException {
  String output = new String();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case T_MOVE:
      case T_TURNRIGHT:
      case T_PUTB:
      case T_PICKB:
      case T_PUTC:
      case T_PICKC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case T_TURNRIGHT:
          jj_consume_token(T_TURNRIGHT);
        robotw.turnRight();
          break;
        case T_MOVE:
          jj_consume_token(T_MOVE);
        robotw.moveForward(1);
          break;
        case T_PUTB:
          jj_consume_token(T_PUTB);
        robotw.putBalloons(1);
          break;
        case T_PICKB:
          jj_consume_token(T_PICKB);
        robotw.grabBalloons(1);
          break;
        case T_PUTC:
          jj_consume_token(T_PUTC);
        robotw.putChips(1);
          break;
        case T_PICKC:
          jj_consume_token(T_PICKC);
        robotw.pickChips(1);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SC);
        break;
      case 41:
        jj_consume_token(41);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARS:
          vars();
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        jj_consume_token(T_BEGIN);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case T_MOVE:
          case T_ASSIGN:
          case T_TURN:
          case T_FACE:
          case T_PUT:
          case T_PICK:
            block();
            break;
          case T_IF:
          case T_WHILE:
          case T_REPEAT:
            controlestr();
            break;
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case T_MOVE:
          case T_ASSIGN:
          case T_TURN:
          case T_FACE:
          case T_PUT:
          case T_PICK:
          case T_IF:
          case T_WHILE:
          case T_REPEAT:
            ;
            break;
          default:
            jj_la1[17] = jj_gen;
            break label_3;
          }
        }
        jj_consume_token(T_END);
      delay(1000);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case T_MOVE:
      case T_TURNRIGHT:
      case T_PUTB:
      case T_PICKB:
      case T_PUTC:
      case T_PICKC:
      case 41:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(0);
    {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public RobotParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f040,0x3c0000,0x7c0000,0x0,0x0,0x0,0x3800000,0xfc0,0x4000000,0x381f040,0x381f040,0xfc0,0xfc0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x0,0x0,0x0,0x4,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,};
   }

  /** Constructor with InputStream. */
  public RobotParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RobotParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RobotParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RobotParser(RobotParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
